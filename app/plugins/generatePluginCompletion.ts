import fs from 'fs';

// Auto-complete not working as it should, so brute-forcing until a better
// solution comes along. In my opinion, this should suffice:
//   type PluginNames = typeof builtInPluginsEnabled[number]['name'];
// but it does not. So I'm just generating a damn type file and moving on.
// Further reading for someone solving this:
// https://stackoverflow.com/questions/61327215/typescript-array-object-property-value-as-type
// Automatically invoke this function during boot.
function generatePluginCompletion(pluginArray, typeName) {
  if (process?.env?.NODE_ENV !== 'development') {
    // Nope out if prod.
    return;
  }

  let pluginNames = pluginArray.map(value => `  '${value.name}'`);

  // Generate the auto-complete file contents.
  const generatedContents =
    '// --------------------------------------------------------------- //\n' +
    '// Auto-generated by generatePluginCompletion().                   //\n' +
    '// Please commit this file.                                        //\n' +
    '// --------------------------------------------------------------- //\n' +
`
type ${typeName} =
${pluginNames.join(' | \n')};

export {
  ${typeName},
}
`;

  // If the file doesn't already exist, create it. If it does exist, check if
  // the contents are different before writing a new copy.
  const filePath = `./app/plugins/types/${typeName}.ts`;
  fs.exists(filePath, (exists) => {
    if (exists) {
      // Don't write a new file if the contents are unchanged.
      fs.readFile(filePath, (error, data) => {
        // This only runs in dev, so we can be less in-your-face with error
        // reporting.
        error && console.error(error);
        if (!error) {
          if (data.toString() !== generatedContents) {
            console.log(
              `%c[generatePluginCompletion] ${typeName} has changed. Writing new version.`,
              'font-weight: bold;'
            );
            // Save generated contents.
            writeFile(filePath, generatedContents);
          }
        }
      });
    }
    else {
      // Save generated contents.
      writeFile(filePath, generatedContents);
    }
  });
}

function writeFile(filePath, fileContents) {
  fs.writeFile(filePath, fileContents, (error) => {
    error && console.error(error);
  });
}

export {
  generatePluginCompletion,
}
